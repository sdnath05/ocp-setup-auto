- name: Creating .env file for the python scripts
  become: yes
  shell: |
    cat > /ocp/installer/python-scripts/.env << EOF
    SSO_URL=""
    OFFLINE_ACCESS_TOKEN="{{ OFFLINE_ACCESS_TOKEN }}"
    EXECUTABLE_PATH="/usr/local/bin"
    OUT_DIR="/ocp"
    PULL_SECRET_URL="https://api.openshift.com/api/accounts_mgmt/v1/access_token"
    EOF

    cd /ocp/installer/python-scripts
    python3 -m pip config set global.break-system-packages true
    pip3 install -r requirements.txt

    # python3 -m venv ocp
    # ./ocp/bin/pip install -r requirements.txt
  tags:
    - configure_python

- name: Uninstalling packages
  include_tasks: reusable/ubuntu/uninstall.yaml
  vars:
    packages:
      - docker.io
      - docker-doc
      - docker-compose
      - docker-compose-v2
      - podman-docker
      - containerd
      - runc

- name: Downloading docker.asc
  become: yes
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'

- name: get the system architecture
  become: yes
  shell: |
    dpkg --print-architecture
  register: system_architecture

- name: Get the ubuntu codename
  become: yes
  shell: |
    . /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}"
  register: ubuntu_codename

- name: Add the repository to Apt sources
  become: yes
  apt_repository:
    repo: "deb [arch={{ system_architecture.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ubuntu_codename.stdout }} stable"
    state: present

- name: Update the apt cache
  become: yes
  apt:
    update_cache: yes

- name: Installing packages
  include_tasks: reusable/ubuntu/install.yaml
  vars:
    packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin

- name: Installing harbor-cli
  become: yes
  apt:
    deb: /ocp/installer/harbor-cli_0.0.8_linux_amd64.deb
    state: present

- name: "Creating the ssl files"
  become: yes
  shell: |
    openssl req -x509 \
      -sha256 -days 3650 \
      -nodes \
      -newkey rsa:2048 \
      -subj "/C=IN/ST=West Bengal/L=Kolkata/O=XYZ Ltd./OU=Developement/CN=ocp.local/emailAddress=admin@subratadebnath.in" \
      -addext "subjectAltName=DNS:*.ocp.local,DNS:cluster.ocp.local,DNS:*.cluster.ocp.local,DNS:apps.cluster.ocp.local,DNS:*.apps.cluster.ocp.local" \
      -keyout /ocp/data/ssl/ocp.key -out /ocp/data/ssl/ocp.crt

    openssl req -x509 \
      -sha256 -days 3650 \
      -nodes \
      -newkey rsa:2048 \
      -subj "/C=IN/ST=West Bengal/L=Kolkata/O=XYZ Ltd./OU=Developement/CN=*.ocp.local/emailAddress=admin@subratadebnath.in" \
      -addext "subjectAltName=DNS:*.ocp.local,DNS:cluster.ocp.local,DNS:*.cluster.ocp.local,DNS:apps.cluster.ocp.local,DNS:*.apps.cluster.ocp.local" \
      -keyout /ocp/data/ssl/ocp-registry.key -out /ocp/data/ssl/ocp-registry.crt
  when: create_ssl is defined

- name: "Verifing the certificates"
  become: yes
  shell: |
    # For verify the crt file
    openssl x509 -in /ocp/data/ssl/ocp.crt -text -noout
    # For verify the key file
    openssl rsa -in /ocp/data/ssl/ocp.key -check

- name: "Copying the certificate file and applying"
  become: yes
  shell: |
    firewall-cmd --add-port={{ quay_host_port }}/tcp --zone=internal --permanent # kube-api-server on control plane nodes
    firewall-cmd --add-port={{ quay_host_port }}/tcp --zone=external --permanent # kube-api-server on control plane nodes
    firewall-cmd --reload
    
    cp /ocp/data/ssl/ocp-registry.crt /usr/local/share/ca-certificates
    cp /ocp/data/ssl/ocp.crt /usr/local/share/ca-certificates
    update-ca-certificates

    awk -v cmd='openssl x509 -noout -subject' '/BEGIN/{close(cmd)};{print | cmd}' < /etc/ssl/certs/ca-certificates.crt

- name: Get the harbor installer file
  become: yes
  get_url:
    url: https://github.com/goharbor/harbor/releases/download/v2.13.2/harbor-offline-installer-v2.13.2.tgz
    dest: /ocp/installer/harbor-offline-installer-v2.13.2.tgz
    mode: '0644'
    timeout: 300

- name: Creating Harbor directory
  file:
    path: /ocp/installer/harbor
    state: directory
    mode: '0755'

- name: "Unarchiving files"
  become: yes
  unarchive:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    remote_src: yes
  loop:
    - src: /ocp/installer/harbor-offline-installer-v2.13.2.tgz
      dest: /ocp/installer
      mode: '0755'

- name: "Copying harbor.yaml file"
  become: yes
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    directory_mode: "{{ item.directory_mode }}"
  loop:
    - src: "../files/harbor.yaml"
      dest: "/ocp/installer/harbor/harbor.yml"
      mode: "0755"
      directory_mode: no
  tags:
    - copy_harbor_yaml

- name: Creating certificate directory for docker
  become: yes
  shell: |
    mkdir -p /etc/docker/certs.d/{{ quay_host_name }}:{{ quay_host_port }}
    cp /ocp/data/ssl/ocp-registry.crt /etc/docker/certs.d/{{ quay_host_name }}:{{ quay_host_port }}/ocp-registry.cert
    cp /ocp/data/ssl/ocp-registry.key /etc/docker/certs.d/{{ quay_host_name }}:{{ quay_host_port }}
    cp /ocp/data/ssl/ocp-registry.crt /etc/docker/certs.d/{{ quay_host_name }}:{{ quay_host_port }}/ca.crt
    systemctl restart docker
    systemctl status docker
  tags:
    - create_docker_certificates

- name: "Creating the Mirror Registry"
  become: yes
  shell: |
    cd /ocp/installer/harbor
    bash ./install.sh
  tags:
    - create_mirror_registry

- name: "Generating the pull-secret.json"
  become: yes
  shell: |
    cd {{ script_dir }}
    python3 main.py
  tags:
    - run_python_scripts

- name: "Updating pull-secret.json with registry username and password"
  become: yes
  shell: |
    cd {{ script_dir }}
    python3 updatePullSecret.py -u {{ registry_user }} -p {{ registry_pass }} -d /ocp
  tags:
    - run_python_scripts

- name: "Sign in into registry using docker {{ quay_host_name }}:{{ quay_host_port }}"
  become: yes
  shell: |
    mkdir -p /root/.docker

    cat /ocp/pull-secret.json | jq > /root/.docker/config.json

    sleep 5s

    docker login \
      -u {{ registry_user }} \
      -p {{ registry_pass }} \
      {{ quay_host_name }}:{{ quay_host_port }}
  tags:
    - sign_in_registry

- name: Sign in into harbor using harbor-cli
  become: yes
  shell: harbor-cli login {{ quay_host_name }}:{{ quay_host_port }} -u {{ registry_user }} -p {{ registry_pass }}
  tags:
    - sign_in_harbor

- name: Creating project in harbor
  become: yes
  shell: |
    harbor-cli project create ocp4 --public=false --storage-limit=-1
    
    # more can be found here: https://unioslo.github.io/harbor-cli/commands/project/
  ignore_errors: true
  tags:
    - create_harbor_project


# Mirror registry references:
# https://docs.redhat.com/en/documentation/openshift_container_platform/4.19/html-single/disconnected_environments/index#installing-mirroring-creating-registry
